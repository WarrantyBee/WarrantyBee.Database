name: Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Source"
        required: true
        type: choice
        options:
          - main
          - stage
          - develop
      reason:
        description: "Notes"
        required: true
        default: "Manual trigger"

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.set_vars.outputs.env_name }}
      env_display_name: ${{ steps.set_vars.outputs.env_display_name }}
      concurrency_group: ${{ steps.set_vars.outputs.concurrency_group }}
    steps:
      - name: Set environment variables
        id: set_vars
        run: |
          if [ "${{ github.event.inputs.branch }}" = "main" ]; then
            echo "env_name=Prod" >> $GITHUB_OUTPUT
            echo "env_display_name=Production" >> $GITHUB_OUTPUT
            echo "concurrency_group=deploy-main" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.branch }}" = "stage" ]; then
            echo "env_name=Stage" >> $GITHUB_OUTPUT
            echo "env_display_name=Stage" >> $GITHUB_OUTPUT
            echo "concurrency_group=deploy-stage" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.branch }}" = "develop" ]; then
            echo "env_name=Test" >> $GITHUB_OUTPUT
            echo "env_display_name=Test" >> $GITHUB_OUTPUT
            echo "concurrency_group=deploy-develop" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy (${{ needs.prepare.outputs.env_display_name }})
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      contents: read
    environment: ${{ needs.prepare.outputs.env_name }}
    concurrency:
      group: ${{ needs.prepare.outputs.concurrency_group }}
      cancel-in-progress: false
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_CA_CERT: ${{ secrets.DB_CA_CERT }}
      DB_PORT: ${{ secrets.DB_PORT }}
    steps:
      - name: Checkout ${{ github.event.inputs.branch }} branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Install PowerShell
        run: sudo apt-get update && sudo apt-get install -y powershell
      - name: Run PowerShell Migration Script
        shell: pwsh
        run: ./Run-Migration.ps1 -db warrantybeedb -skipdata
      - name: Run Generated SQL Script on DB
        run: |
          echo "$DB_CA_CERT" > db-ca.pem
          mysql --ssl-ca=db-ca.pem \
                --host=$DB_HOST \
                --user=$DB_USER \
                --password=$DB_PWD \
                --port=$DB_PORT \
                --protocol=tcp \
                warrantybeedb < output.sql
